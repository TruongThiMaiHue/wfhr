generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model action {
  id                    Int                     @id
  name                  String?                 @db.VarChar(45)
  permission_has_action permission_has_action[]
}

model permission {
  id                    Int                     @id @default(autoincrement())
  name                  String?                 @db.VarChar(45)
  permission_has_action permission_has_action[]
  role_has_permission   role_has_permission[]
}

model permission_has_action {
  permission_id Int
  action_id     Int
  action        action     @relation(fields: [action_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_permission_has_action_action1")
  permission    permission @relation(fields: [permission_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_permission_has_action_permission1")

  @@id([permission_id, action_id])
  @@index([action_id], map: "fk_permission_has_action_action1_idx")
  @@index([permission_id], map: "fk_permission_has_action_permission1_idx")
}

model report {
  id               Int
  name             String?   @db.VarChar(45)
  task_today       String?   @db.VarChar(300)
  task_tomorrow    String?   @db.VarChar(300)
  created_date     DateTime? @db.Date
  issue            String?   @db.VarChar(45)
  report_date      DateTime? @db.Date
  created_by       Int
  is_on_leave      Int?      @db.TinyInt
  user             user      @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_report_user1")

  @@id([id, created_by])
  @@index([created_by], map: "fk_report_user1_idx")
}

model request {
  id             Int       @default(autoincrement())
  reason         String?   @db.VarChar(45)
  is_allday      Boolean?
  created_date   DateTime? @db.Date
  requested_date DateTime? @db.Date
  status         Int?      @db.TinyInt
  created_by     Int
  user           user      @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_request_user")

  @@id([id, created_by])
  @@index([created_by], map: "fk_request_user_idx")
}

model role {
  id                  Int                   @id @default(autoincrement())
  name                String?               @db.VarChar(45)
  code                String?               @db.VarChar(10)
  last_modify_on      DateTime?             @db.Date
  last_modify_by      String?               @db.VarChar(45)
  is_active           Int?                  @db.TinyInt
  role_has_permission role_has_permission[]
  user                user[]
}

model role_has_permission {
  role_id       Int
  permission_id Int
  permission    permission @relation(fields: [permission_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_role_has_permission_permission1")
  role          role       @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_role_has_permission_role1")

  @@id([role_id, permission_id])
  @@index([permission_id], map: "fk_role_has_permission_permission1_idx")
  @@index([role_id], map: "fk_role_has_permission_role1_idx")
}

model team {
  id           Int         @id
  name         String?     @db.VarChar(45)
  no_of_member Int?
  leader       String?     @db.VarChar(45)
  is_active    Int?        @db.TinyInt
  created_at   DateTime?   @db.Date
  updated_at   DateTime?   @db.Date
  user_team    user_team[]
}

model user {
  id            Int         @default(autoincrement())
  email         String?     @db.VarChar(45)
  name          String?     @db.VarChar(45)
  code          String?     @db.VarChar(45)
  is_active     Int?        @db.TinyInt
  starting_date DateTime?   @db.Date
  updated_at    DateTime?   @db.Date
  role_id       Int
  role          role        @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_role1")
  report        report[]
  request       request[]
  user_team     user_team[]

  @@id([id, role_id])
  @@index([role_id], map: "fk_user_role1_idx")
}

model user_team {
  user_id Int
  team_id Int
  team    team @relation(fields: [team_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_team_team1_idx")
  user    user @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_team_user1_idx")

  @@id([user_id, team_id])
  @@index([team_id], map: "fk_user_team_team1_idx")
  @@index([user_id], map: "fk_user_team_user1_idx")
}
